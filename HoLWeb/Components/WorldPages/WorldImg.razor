@page "/IMG"
@rendermode InteractiveServer

@using HoLWeb.BusinessLayer.Interfaces.IThumbImgManagers
@using Microsoft.AspNetCore.Components.Forms
@using SixLabors.ImageSharp
@using HoLWeb.BusinessLayer.Models

@inject IThumbImgManager ThumbManager
@inject NavigationManager Navigation


<div class="world-image-container" id="@($"worldImageContainer{worldModel.Id}")">
    <div class="image-container" id="@($"imgContainer{worldModel.Id}")">
        <div class="imgBorder" id="@($"imgBorder{worldModel.Id}")" style="background-image: url(@baseImage); background-position: @(thumb.X)% @(thumb.Y)%; background-size: @(thumb.ScaleImage)%;">
            <p class="nameWorld" id="@($"nameWorld{worldModel.Id}")"> @worldModel.WorldName</p>
            <button type="button" class="btn btn-outline-primary editWorldImg" id="@($"editWorldImg{worldModel.Id}")" @onclick="Edit">Uprav</button>
            <label for="@($"addWorldImgLabel{worldModel.Id}")" class="btn btn-outline-success addWorldImg" id="@($"addWorldImg{worldModel.Id}")">Přidej</label>
            <button type="button" class="btn btn-outline-danger deleteWorldImg" id="@($"deleteWorldImg{worldModel.Id}")" @onclick="Delete">Smaž</button>
        </div>
    </div>

    <InputFile OnChange="HandleSelected" :preventDefault accept="image/*" id="@($"addWorldImgLabel{worldModel.Id}")" hidden />
</div>

@code {
    [CascadingParameter] public WorldDto worldModel { get; set; } = new WorldDto();

    [Parameter] public string ClassType { get; set; } //not implemented yet

    public ThumbnailImageDto thumb = new ThumbnailImageDto();
    public string baseImage = string.Empty;
    private bool showButtons = true;
    private bool isSaved = false;

    protected override async Task OnInitializedAsync()
    {
        if(worldModel.ThumbnailImageId != 0)
        {
            thumb = await ThumbManager.GetDateByIdAsync(worldModel.ThumbnailImageId);

            if(thumb != null)
            {
                baseImage = $"data:image/webp;base64,{Convert.ToBase64String(thumb.ImageData)}";
            }
            else
            {
                thumb = new ThumbnailImageDto();
            }
        }
        else
        {
            thumb = new ThumbnailImageDto();
        }
    }

    private void Edit()
    {
        if(worldModel.ThumbnailImageId != 0)
        {
            Navigation.NavigateTo($"/EditThumbnail/{worldModel.ThumbnailImageId}");
        }
    }

    private void Delete()
    {
        ThumbManager.DeleteDate(worldModel.ThumbnailImageId);
        baseImage = "Images/PlaceholderImg.png";
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if(file == null)
        {
            Console.WriteLine("No file selected.");
            return;
        }
        Int64 originalSize = file.Size;

        using(var stream = file.OpenReadStream(maxAllowedSize: originalSize))
        {
            using(var image = await Image.LoadAsync(stream))
            {
                using(var memoryStream = new MemoryStream())
                {
                    await image.SaveAsWebpAsync(memoryStream);
                    var webpBytes = memoryStream.ToArray();

                    baseImage = $"data:image/webp;base64,{Convert.ToBase64String(webpBytes)}";

                    thumb.ImageName = worldModel.WorldName;
                    thumb.ImageData = webpBytes;
                    Add();
                }
            }
        }
    }

    private void Add()
    {
        if(thumb.Id == 0)
        {
            try
            {
                ThumbManager.AddData(thumb);
                isSaved = true;
            }
            catch(Exception)
            {
                isSaved = false;
                baseImage = thumb.BaseImage;
            }
        }
        else
        {
            try
            {
                ThumbManager.UpdateData(thumb,thumb.Id);
                isSaved = true;
            }
            catch(Exception)
            {
                isSaved = false;
                baseImage = thumb.BaseImage;
            }
        }
    }


}



<style>
    .world-image-container {
        display: block;
    }

    .image-container {
        width: 15rem;
        min-width: 200px;
        height: 15rem;
        min-height: 200px;
    }

        .image-container .imgBorder {
            border: 5px solid black;
            border-radius: 50%;
            height: 100%;
            width: 100%;
            background-repeat: no-repeat;
            overflow: hidden;
            justify-content: center;
            align-items: center;
            display: flex;
            position: relative;
        }

    .imgBorder:hover {
        transform: scale(1.1);
        box-shadow: 0 0 20px black;
    }

        .imgBorder:hover .nameWorld {
            visibility: hidden;
        }

    .nameWorld {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: rgb(0,0,0);
        font-weight: bolder;
        font-size: 1.5rem;
        visibility: visible;
        background-color: rgba(255, 255, 255, 0.5);
        border-radius: 20%;
        text-align: center;
    }

    .editWorldImg {
        position: absolute;
        top: 50%;
        left: 0;
        transform: translate(0, -50%);
        visibility: hidden;
    }

    .addWorldImg {
        position: absolute;
        top: 0;
        left: 50%;
        transform: translate(-50%, 0);
        visibility: hidden;
    }

    .deleteWorldImg {
        position: absolute;
        top: 50%;
        right: 0%;
        transform: translate(0%, -50%);
        visibility: hidden;
    }

    .imgBorder:hover .editWorldImg {
        visibility: visible;
    }

    .imgBorder:hover .addWorldImg {
        visibility: visible;
    }

    .imgBorder:hover .deleteWorldImg {
        visibility: visible;
    }
</style>
